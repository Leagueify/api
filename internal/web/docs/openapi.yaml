openapi: 3.1.0
info:
  version: 0.0.1
  title: Leagueify API
  summary: Open Source Sporting League Platform.
  description: Host your own sports league using Leagueify, the all-in-one league hosting platform.
  license:
    name: MIT
    url: https://raw.githubusercontent.com/Leagueify/api/main/LICENSE
  contact:
    name: Leagueify Support
    url: https://github.com/Leagueify/api/issues

servers:
  - url: http://localhost/api
    description: Local Development Server - Docker
  - url: http://localhost:8888/api
    description: Local Development Server - Standalone Executable

paths:
  /accounts:
    post:
      tags:
      - Accounts
      summary: Create an account
      description: '
        Create an account for the Leagueify instance.
        Accounts created before the email service is configured do not require verification.
        **NOTE: Must be 18 or older to create an account.**
        '
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  description: User's first name
                  type: string
                  minLength: 3
                  maxLength: 32
                lastName:
                  description: User's last name
                  type: string
                  minLength: 3
                  MaxLength: 32
                email:
                  description: Email associated to the account
                  type: string
                password:
                  description: Raw user password for the account
                  type: string
                  minLength: 8
                dateOfBirth:
                  description: User's date of birth
                  type: string
                  example: "YYYY-MM-DD"
                phone:
                  description: User's phone number
                  type: string
                  example: "+12085550000"
                coach:
                  description: User's preference to coach
                  type: boolean
                  default: false
                volunteer:
                  description: User's preference to volunteer
                  type: boolean
                  default: false
              required:
                - firstName
                - lastName
                - email
                - password
                - dateOfBirth
                - phone
            examples:
              valid payload:
                summary: Valid account creation payload
                value: {
                  "firstName": "Leagueify",
                  "lastName": "User",
                  "email": "test@leagueify.org",
                  "password": "Test123!",
                  "dateOfBirth": "1990-08-31",
                  "phone": "+120855501234",
                  "coach": true,
                  "volunteer": false
                }
      responses:
        201:
          description: Account Created
          content:
            application/json:
              schema:
                $ref: "#/components/successful/schema"
              examples:
                accountCreated:
                  $ref: "#/components/successful/example"
        400:
          $ref: "#/components/errors/badRequest"

  /accounts/{id}/verify:
    post:
      tags:
        - Accounts
      summary: Verify an account
      description: '
        Verify a created account for the Leagueify instance.
        Accounts created before the email service is configured do not require verification.
        '
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the account to verify
          required: true
          type: string
      responses:
        200:
          description: Account successfully verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    description: Status text for account verification outcome
                    type: string
                  apikey:
                    description: API Key used for API Authentication
                    type: string
              examples:
                accountCreationResponse:
                  summary: Account successfully verified
                  value: {
                    "status": "successful",
                    "apikey": "BHS4R8N34XQGCGEGWH2H2EDV77QR6TC59169WWPDAPX9F4JB1RETZJ7AEZEDVE1S"
                    }
        401:
          $ref: "#/components/errors/unauthorized"

  /leagues:
    post:
      tags:
      - Leagues
      summary: Create a league
      security:
        - apiKey: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Name of the league
                  type: string
                sportID:
                  description: ID of desired sport for the league
                  type: integer
              required:
                - name
                - sportID
            examples:
              valid payload:
                summary: Valid league payload
                value: {
                  "name": "Leagueify Hockey League",
                  "sportID": 4,
                  }
      responses:
        201:
          description: League Created
          content:
            application/json:
              schema:
                $ref: "#/components/successful/schema"
              examples:
                leagueCreated:
                  $ref: "#/components/successful/example"
        400:
          $ref: "#/components/errors/badRequest"
        401:
          $ref: "#/components/errors/unauthorized"

  /positions:
    post:
      tags:
        - Positions
      summary: Create Position(s)
      description: '
        Create player positions available within the league.
        '
      produces:
        - application/json
      security:
        - apiKey: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/positions/schema"
            examples:
              validPositionRequest:
                $ref: "#/components/positions/examples/request"
      responses:
        201:
          description: Position(s) Created
          content:
            application/json:
              schema:
                $ref: "#/components/successful/schema"
              examples:
                positionCreated:
                  $ref: "#/components/successful/example"
        401:
          $ref: "#/components/errors/unauthorized"
    get:
      tags:
        - Positions
      summary: List Positions
      description: '
        This endpoint will return a list of available league positions.
        '
      produces:
        - application/json
      security:
        - apiKey: []
      responses:
        200:
          $ref: "#/components/positions/examples/response"
        401:
          $ref: "#/components/errors/unauthorized"
  
  /sports:
    get:
      tags:
        - Sports
      summary: List Sports
      description: '
        This endpoint will return a list of supported and compatible Leagueify sports.
        '
      produces:
        - application/json
      security:
        - apiKey: []
      responses:
        200:
          description: Returns list of sports
          content:
            application/json:
              schema:
                type: object
                properties:
                  divisions:
                    description: List of Sports
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/Sports'
              examples:
                responseListSports:
                  summary: List of Sports
                  value: [
                    {
                      "id": "1",
                      "name": "baseball",
                    },
                    {
                      "id": "2",
                      "name": "football",
                    },
                    {
                      "id": "3",
                      "name": "hockey",
                    },
                  ]
        401:
          $ref: "#/components/errors/unauthorized"

components:
  errors:
    badRequest:
      description: Error with request body
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                description: Error message detailing the request issue
                type: string
          examples:
            default:
              summary: Response containing error message
              value: {
                "detail": "< details about the error >",
                "status": "bad request"
                }
    unauthorized:
      description: Authorization Issue
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                description: Error message detailing the request issue
                type: string
          examples:
            default:
              summary: Response containing unauthorized message
              value: {
                "status": "unauthorized"
                }
  positions:
    schema:
      type: object
      properties:
        positions:
          description: List of Positions to create
          type: array
          items:
            description: Position name
            type: string
    examples:
      request:
        summary: Request body with positions
        value: {
            "positions": [
              "skater",
              "goalie"
            ]
          }
      response:
        description: List of Positions
        content:
          application/json:
            schema:
              type: array
              items:
                description: List of Positions
                type: object
                properties:
                  id:
                    type: string
                    description: ID of position
                  name:
                    type: string
                    description: Name of position
            examples:
              default:
                summary: Response creating position(s)
                value: [
                    {
                      "id": "123",
                      "name": "skater",
                    },
                    {
                      "id": "456",
                      "name": "goalie"
                    }
                  ]
  schemas:
    Sports:
      type: object
      properties:
        id:
          description: Sport id
          type: string
        name:
          description: Sport name
          type: string
  successful:
    schema:
      type: object
      properties:
        status:
          description: Successful Request Response
          type: string
    example:
      summary: Successful Request Response
      value: {
          "status": "successful"
        }
  securitySchemes:
    apiKey:
      type: apiKey
      name: apiKey
      in: header
