openapi: 3.1.0
info:
  version: 0.0.1
  title: Leagueify API
  summary: Open Source Sporting League Platform.
  description: Host your own sports league using Leagueify, the all-in-one league hosting platform.
  license:
    name: MIT
    url: https://raw.githubusercontent.com/Leagueify/api/main/LICENSE
  contact:
    name: Leagueify Support
    url: https://github.com/Leagueify/api/issues

servers:
  - url: http://server.localhost/api
    description: Local Development Server - Docker
  - url: http://localhost:8000/api
    description: Local Development Server - Standalone Executable

paths:
  /accounts:
    post:
      tags:
      - Accounts
      summary: Create an account
      description: '
        Create an account for the Leagueify instance.
        Accounts created before the email service is configured do not require verification.
        **NOTE: Must be 18 or older to create an account.**
        '
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                firstName:
                  description: User's first name
                  type: string
                  minLength: 3
                  maxLength: 32
                lastName:
                  description: User's last name
                  type: string
                  minLength: 3
                  MaxLength: 32
                email:
                  description: Email associated to the account
                  type: string
                password:
                  description: Raw user password for the account
                  type: string
                  minLength: 8
                dateOfBirth:
                  description: User's date of birth
                  type: string
                  example: "YYYY-MM-DD"
                phone:
                  description: User's phone number
                  type: string
                  example: "+12085550000"
                coach:
                  description: User's preference to coach
                  type: boolean
                  default: false
                volunteer:
                  description: User's preference to volunteer
                  type: boolean
                  default: false
              required:
                - firstName
                - lastName
                - email
                - password
                - dateOfBirth
                - phone
            examples:
              valid payload:
                summary: Valid account creation payload
                value: {
                  "firstName": "Leagueify",
                  "lastName": "User",
                  "email": "test@leagueify.org",
                  "password": "Test123!",
                  "dateOfBirth": "1990-08-31",
                  "phone": "+120855501234",
                  "coach": true,
                  "volunteer": false
                }
      responses:
        '201':
          description: Account Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    description: Account Successfully Created
                    type: string
              examples:
                accountCreationResponse:
                  summary: Account Successfully Created
                  value: {
                    "status": "successful"
                    }
        '400':
          description: Error Creating Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneral'
              examples:
                ErrorGeneral:
                  $ref: '#/components/examples/ErrorGeneral'

  /accounts/{id}/verify:
    post:
      tags:
        - Accounts
      summary: Verify an account
      description: '
        Verify a created account for the Leagueify instance.
        Accounts created before the email service is configured do not require verification.
        '
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the account to verify
          required: true
          type: string
      responses:
        '200':
          description: Account successfully verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    description: Status text for account verification outcome
                    type: string
                  token:
                    description: JWT Token to be used for API authentication
                    type: string
              examples:
                accountCreationResponse:
                  summary: Account successfully verified
                  value: {
                    "status": "successful",
                    "token": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2MiOiJXS0RKMloxQyIsImV4cCI6MTcxMzk3ODc4NSwiaWF0IjoxNzEzMzczOTg1LCJqdGkiOiJYREQwNU5XNjY2IiwibmJmIjoxNzEzMzczOTg1fQ.MffJig2wVtxQQJSbDQetK7vH3GqWUccQ8UDDc9ZA3LEx6IVLs_kpP9wgS0OZ5UlB736NA3zDUmDrjty2guk1UQ"
                    }
        '401':
          description: Authorization issue during account verification
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    description: Status text for account verification outcome
                    type: string
              examples:
                accountCreationError:
                  summary: Account not verified
                  value: {
                    "status": "unauthorized",
                    }

  /league:
    post:
      tags:
      - League
      summary: Create a league
      security:
        - bearerToken: []
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  description: Name of the league
                  type: string
                sportID:
                  description: ID of desired sport for the league
                  type: integer
                divisions:
                  description: List of Division Objects
                  type: array
                  items:
                    type: object
                    $ref: '#/components/schemas/Division'
                positions:
                  description: Positions players can fill on a team
                  type: array
                  items:
                    type: string
              required:
                - name
                - sportID
                - divisions
                - positions
            examples:
              valid payload:
                summary: Valid league payload
                value: {
                  "name": "Leagueify Open League",
                  "sportID": 1,
                  "divisions": [
                    {
                      "name": "14U",
                      "minAge": 10,
                      "maxAge": 14,
                      "open": false
                    },
                    {
                      "name": "18U",
                      "minAge": 13,
                      "maxAge": 18,
                      "open": false
                    }
                  ],
                  "positions": [
                    "Skater",
                    "Goalie"
                    ]
                  }
      responses:
        '201':
          description: Account Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  league:
                    description: League ID
                    type: integer
              examples:
                leagueResponse:
                  summary: Response containing the League ID
                  value: {
                    "leagueID": 1
                    }
        '400':
          description: Error Creating Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneral'
              examples:
                ErrorGeneral:
                  $ref: '#/components/examples/ErrorGeneral'
        '403':
          description: Error Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
              examples:
                ErrorUnauthorized:
                  $ref: '#/components/examples/ErrorUnauthorized'

components:
  schemas:
    Division:
      type: object
      properties:
        name:
          description: Division name
          type: string
        minAge:
          description: Minimum age player needs to be to play in the division
          type: integer
          minimum: 1
          maximum: 127
        maxAge:
          description: Maximum age player needs to be to play in the division
          type: integer
          minimum: 1
          maximum: 127
        open:
          description: Allows all players to join the division
          type: boolean
    ErrorGeneral:
      type: object
      properties:
        message:
          description: Error message detailing the request issue
          type: string
    ErrorUnauthorized:
      type: object
      properties:
        message:
          description: Error message detailing the request issue
          type: string
  examples:
    ErrorGeneral:
      summary: Response containing error message
      value: {
        "detail": "email already in use",
        "status": "bad request"
        }
    ErrorUnauthorized:
      summary: Response containing unauthorized message
      value: {
        "message": "Unauthorized"
        }

  securitySchemes:
    bearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
